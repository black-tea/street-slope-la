# load libraries
library(sf)
library(tidyverse)
library(leaflet)
# import street data
fname <- system.file("Data/Street_Pavement_Condition.shp", package="sf")
print(fname)
bss <- st_read(system.file("C:\\Users\\dotcid034\\Documents\\GitHub\\la-street-slope\\Data\\Street_Pavement_Condition.shp", package="sf"), quiet=TRUE)
# load libraries
library(sf)
library(tidyverse)
library(leaflet)
# import street data
fname <- system.file("~Data/Street_Pavement_Condition.shp", package="sf")
print(fname)
bss <- st_read(system.file("C:\\Users\\dotcid034\\Documents\\GitHub\\la-street-slope\\Data\\Street_Pavement_Condition.shp", package="sf"), quiet=TRUE)
dir()
file.exists("Data")
file.exists("Data/Street_Pavement_Condition.shp")
fname <- system.file("Data/Street_Pavement_Condition.shp")
fname
fname <- system.file("Data/Street_Pavement_Condition.shp",package="sf")
fname
fname <- "Data/Street_Pavement_Condition.shp"
fname
st_read(fname)
# load libraries
library(sf)
library(tidyverse)
library(leaflet)
# import street data
bss <- st_read("Data/Street_Pavement_Condition.shp",quiet=TRUE)
boe <- st_read("Data/Streets_Centerline.shp", quiet=TRUE)
int <- st_read("Data/Intersections.shp", quiet=TRUE)
# import elevation data
head(bss)
head(boe)
attributes(boe)
attributes(boe)
glimpse(boe)
glimpse(boe)
glimpse(bss)
glimpse(bss)
glimpse(boe)
glimpse(bss)
# trim bss centerline
bss <- bss %>%
select(SECT_ID, PRIME, FROM_, TO_, SURF1, ZLENGTH, ZWIDTH, geometry) %>%
rename(sect.id = SECT_ID,
street = PRIME,
from = FROM_,
to = TO_,
surface = SURF1,
length.ft <- ZLENGTH,
width.ft <- ZWIDTH,
geom <- geometry)
# trim bss centerline
bss <- bss %>%
select(SECT_ID, PRIME, FROM_, TO_, SURF1, ZLENGTH, ZWIDTH, geometry) %>%
rename(sect.id = 'SECT_ID',
street = 'PRIME',
from = 'FROM_',
to = 'TO_',
surface = 'SURF1',
length.ft <- 'ZLENGTH',
width.ft <- 'ZWIDTH',
geom <- 'geometry')
# trim bss centerline
bss <- bss %>%
select(SECT_ID, PRIME, FROM_, TO_, SURF1, ZLENGTH, ZWIDTH, geometry) %>%
rename(sect.id = 'SECT_ID',
street = 'PRIME',
from = 'FROM_',
to = 'TO_',
surface = 'SURF1',
length.ft = 'ZLENGTH',
width.ft = 'ZWIDTH',
geom = 'geometry')
# trim boe centerline
boe <- boe %>%
select(ASSETID, INT_ID_FRO, INT_ID_TO, SECT_ID, OLD_STREET, Street_Des) %>%
rename(asset.id = 'ASSETID',
fromint.id = 'INT_ID_FRO',
toint.id = 'INT_ID_TO',
sect.id = 'SECT_ID',
old.desig = 'OLD_STREET',
new.desig = 'Street_Des')
# left-join bss <- boe
streets <- bss %>%
left_join(boe, by="sect.id")
# load libraries
library(sf)
library(tidyverse)
install.packages('tidyverse')
install.packages('tidyverse')
# load libraries
library(sf)
library(tidyverse)
require(devtools)
install.packages('devtools')
require(devtools)
install.packages('devtools')
require(devtools)
install_version('tidyverse', version '1.1.1', repos='http://cran.us.r-project.org')
install_version(“tidyverse”, version = “1.1.1”, repos = “http://cran.us.r-project.org”)
install_version(tidyverse, version = “1.1.1”, repos = “http://cran.us.r-project.org”)
install_version(tidyverse, version = 1.1.1, repos = “http://cran.us.r-project.org”)
install_version(tidyverse, version = 1.1.1, repos = http://cran.us.r-project.org)
install_version('tidyverse', version = '1.1.1', repos = “http://cran.us.r-project.org”)
install_version('tidyverse', version = '1.1.1', repos = 'http://cran.us.r-project.org')
# load libraries
library(sf)
#library(tidyverse)
library(leaflet)
# import street data
bss <- st_read("Data/Street_Pavement_Condition.shp",quiet=TRUE)
boe <- st_read("C:/Users/Tim/Documents/data/street-slope-la/Streets_Centerline/Streets_Centerline.shp", quiet=TRUE)
int <- st_read("Data/Intersections.shp", quiet=TRUE)
# trim bss centerline
bss <- bss %>%
select(SECT_ID, PRIME, FROM_, TO_, SURF1, ZLENGTH, ZWIDTH, geometry) %>%
rename(sect.id = 'SECT_ID',
street = 'PRIME',
from = 'FROM_',
to = 'TO_',
surface = 'SURF1',
length.ft = 'ZLENGTH',
width.ft = 'ZWIDTH',
geom = 'geometry') %>%
mutate(sect.id = as.double(sect.id))
# trim bss centerline
bss <- bss %>%
dplyr::select(SECT_ID, PRIME, FROM_, TO_, SURF1, ZLENGTH, ZWIDTH, geometry) %>%
rename(sect.id = 'SECT_ID',
street = 'PRIME',
from = 'FROM_',
to = 'TO_',
surface = 'SURF1',
length.ft = 'ZLENGTH',
width.ft = 'ZWIDTH',
geom = 'geometry') %>%
mutate(sect.id = as.double(sect.id))
library(dplyr)
install.packages('dplyr')
install.packages('dplyr')
install.packages("dplyr")
library(dplyr)
# trim bss centerline
bss <- bss %>%
dplyr::select(SECT_ID, PRIME, FROM_, TO_, SURF1, ZLENGTH, ZWIDTH, geometry) %>%
rename(sect.id = 'SECT_ID',
street = 'PRIME',
from = 'FROM_',
to = 'TO_',
surface = 'SURF1',
length.ft = 'ZLENGTH',
width.ft = 'ZWIDTH',
geom = 'geometry') %>%
mutate(sect.id = as.double(sect.id))
# trim boe centerline
boe <- boe %>%
dplyr::select(ASSETID, INT_ID_FRO, INT_ID_TO, SECT_ID, OLD_STREET, Street_Des) %>%
rename(asset.id = 'ASSETID',
fromint.id = 'INT_ID_FRO',
toint.id = 'INT_ID_TO',
sect.id = 'SECT_ID',
old.desig = 'OLD_STREET',
new.desig = 'Street_Des') %>%
mutate(sect.id = as.double(sect.id)) %>%
st_set_geometry(NULL)
# load libraries
library(sf)
library(dplyr)
library(leaflet)
# import street data
bss <- st_read("Data/Street_Pavement_Condition.shp",quiet=TRUE)
boe <- st_read("C:/Users/Tim/Documents/data/street-slope-la/Streets_Centerline/Streets_Centerline.shp", quiet=TRUE)
int <- st_read("Data/Intersections.shp", quiet=TRUE)
# trim bss centerline
bss <- bss %>%
dplyr::select(SECT_ID, PRIME, FROM_, TO_, SURF1, ZLENGTH, ZWIDTH, geometry) %>%
rename(sect.id = 'SECT_ID',
street = 'PRIME',
from = 'FROM_',
to = 'TO_',
surface = 'SURF1',
length.ft = 'ZLENGTH',
width.ft = 'ZWIDTH',
geom = 'geometry') %>%
mutate(sect.id = as.double(sect.id))
# trim boe centerline
boe <- boe %>%
dplyr::select(ASSETID, INT_ID_FRO, INT_ID_TO, SECT_ID, OLD_STREET, Street_Des) %>%
rename(asset.id = 'ASSETID',
fromint.id = 'INT_ID_FRO',
toint.id = 'INT_ID_TO',
sect.id = 'SECT_ID',
old.desig = 'OLD_STREET',
new.desig = 'Street_Des') %>%
mutate(sect.id = as.double(sect.id)) %>%
st_set_geometry(NULL)
# left join bss <- boe
streets <- bss %>%
inner_join(boe, by='sect.id')
int <- int %>%
select(ASSETID, CL_NODE_ID, X, Y, LAT, LON, geometry) %>%
rename(asset.id = 'ASSETID',
clnode.id = 'CL_NODE_ID',
x = 'X',
y = 'Y',
lat = 'LAT',
lon = 'LON',
geom = 'geometry')
library(raster)
# import elevation data & merge into one raster layer
la_n <- raster("C:/Users/Tim/Documents/data/street-slope-la/n35w119/grdn35w119_13")
la_s <- raster("C:/Users/Tim/Documents/data/street-slope-la/n34w119/grdn34w119_13")
la_elev <- merge(la_n, la_s)
# preview the merged raster
plot(la_elev)
# cast as sp object, extract elevation, convert back to sf object
int_sp <- as(int, "Spatial")
# cast as sp object, extract elevation, convert back to sf object
int_sp <- as_Spatial(int)
# cast as sp object, extract elevation, convert back to sf object
int_sp <- as_Spatial(st_geometry(int))
int
str(int)
plot(int)
plot(st_geometry(int))
# load libraries
library(sf)
library(dplyr)
library(leaflet)
# import street data
bss <- st_read("Data/Street_Pavement_Condition.shp",quiet=TRUE)
boe <- st_read("C:/Users/Tim/Documents/data/street-slope-la/Streets_Centerline/Streets_Centerline.shp", quiet=TRUE)
int <- st_read("Data/Intersections.shp", quiet=TRUE)
as_Spatial(int)
as(int, "Spatial")
int <- int %>%
select(ASSETID, CL_NODE_ID, X, Y, LAT, LON) %>%
rename(asset.id = 'ASSETID',
clnode.id = 'CL_NODE_ID',
x = 'X',
y = 'Y',
lat = 'LAT',
lon = 'LON')
int <- int %>%
dplyr::select(ASSETID, CL_NODE_ID, X, Y, LAT, LON) %>%
rename(asset.id = 'ASSETID',
clnode.id = 'CL_NODE_ID',
x = 'X',
y = 'Y',
lat = 'LAT',
lon = 'LON')
# cast as sp object, extract elevation, convert back to sf object
int_sp <- as(int, "Spatial")
int_elev <- extract(la_elev,
int_sp,
method='simple',
df=TRUE)
#int <- st_as_sf(int_elev)
# extract elevation
glimpse(int_elev)
# cast as sp object, extract elevation, convert back to sf object
int_sp <- as(int, "Spatial")
int_elev <- extract(la_elev,
int_sp,
method='simple')
#int <- st_as_sf(int_elev)
# extract elevation
glimpse(int_elev)
# cast as sp object, extract elevation, convert back to sf object
int_sp <- as(int, "Spatial")
int_elev <- extract(la_elev,
int_sp,
method='simple')
int_elev <- cbind(int, int_elev)
glimpse(int_elev)
streets <- streets %>%
inner_join(int_elev, by=c("fromint.id" = "clnode.id")) %>%
rename(from.elev = "int_elev") %>%
inner_join(int_elev, by=c("toint.id" = "clnode.id")) %>%
rename(to.elev = "int_elev")
# cast as sp object, extract elevation, convert back to sf object
int_sp <- as(int, "Spatial")
int_elev <- extract(la_elev,
int_sp,
method='simple')
int_elev <- cbind(int, int_elev)
int_elev <- int_elev %>%
select(clnode.id, int_elev) %>%
st_set_geometry(NULL)
# cast as sp object, extract elevation, convert back to sf object
int_sp <- as(int, "Spatial")
int_elev <- extract(la_elev,
int_sp,
method='simple')
int_elev <- cbind(int, int_elev)
int_elev <- int_elev %>%
dplyr::select(clnode.id, int_elev) %>%
st_set_geometry(NULL)
streets <- streets %>%
inner_join(int_elev, by=c("fromint.id" = "clnode.id")) %>%
rename(from.elev = "int_elev") %>%
inner_join(int_elev, by=c("toint.id" = "clnode.id")) %>%
rename(to.elev = "int_elev")
# trim bss centerline
bss <- bss %>%
dplyr::select(SECT_ID, PRIME, FROM_, TO_, SURF1, ZLENGTH, ZWIDTH, geometry) %>%
rename(sect.id = 'SECT_ID',
street = 'PRIME',
from = 'FROM_',
to = 'TO_',
surface = 'SURF1',
length.ft = 'ZLENGTH',
width.ft = 'ZWIDTH',
geom = 'geometry') %>%
mutate(sect.id = as.double(sect.id))
# trim boe centerline
boe <- boe %>%
dplyr::select(ASSETID, INT_ID_FRO, INT_ID_TO, SECT_ID, OLD_STREET, Street_Des) %>%
rename(asset.id = 'ASSETID',
fromint.id = 'INT_ID_FRO',
toint.id = 'INT_ID_TO',
sect.id = 'SECT_ID',
old.desig = 'OLD_STREET',
new.desig = 'Street_Des') %>%
mutate(sect.id = as.double(sect.id)) %>%
st_set_geometry(NULL)
# left join bss <- boe
streets <- bss %>%
inner_join(boe, by='sect.id') %>%
mutate(length.m = 3.28084*length.ft)
streets <- streets %>%
inner_join(int_elev, by=c("fromint.id" = "clnode.id")) %>%
rename(from.elev = "int_elev") %>%
inner_join(int_elev, by=c("toint.id" = "clnode.id")) %>%
rename(to.elev = "int_elev") %>%
mutate(slope = (abs((from.elev - to.elev))/(length.m))*100)
# Set Color Palette
pal <- colorNumeric(
palette = "YlGnBu",
domain = streets$slope
)
# Create the leaflet map
map <- leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite) %>%
addPolylines(
color = ~pal(slope),
weight = 1,
opacity = 1,
data = streets) %>%
addLegend(pal = pal,
values = streets$slope,
position = "bottomright",
title = "Slope",
labFormat = labelFormat(suffix = "%"))
map
# trim bss centerline
bss <- bss %>%
dplyr::select(SECT_ID, PRIME, FROM_, TO_, SURF1, ZLENGTH, ZWIDTH, geometry) %>%
rename(sect.id = 'SECT_ID',
street = 'PRIME',
from = 'FROM_',
to = 'TO_',
surface = 'SURF1',
length.ft = 'ZLENGTH',
width.ft = 'ZWIDTH',
geom = 'geometry') %>%
mutate(sect.id = as.double(sect.id))
# load libraries
library(sf)
library(dplyr)
library(leaflet)
# import street data
bss <- st_read("Data/Street_Pavement_Condition.shp",quiet=TRUE)
boe <- st_read("C:/Users/Tim/Documents/data/street-slope-la/Streets_Centerline/Streets_Centerline.shp", quiet=TRUE)
int <- st_read("Data/Intersections.shp", quiet=TRUE)
# trim bss centerline
bss <- bss %>%
dplyr::select(SECT_ID, PRIME, FROM_, TO_, SURF1, ZLENGTH, ZWIDTH, geometry) %>%
rename(sect.id = 'SECT_ID',
street = 'PRIME',
from = 'FROM_',
to = 'TO_',
surface = 'SURF1',
length.ft = 'ZLENGTH',
width.ft = 'ZWIDTH',
geom = 'geometry') %>%
mutate(sect.id = as.double(sect.id))
# trim boe centerline
boe <- boe %>%
dplyr::select(ASSETID, INT_ID_FRO, INT_ID_TO, SECT_ID, OLD_STREET, Street_Des) %>%
rename(asset.id = 'ASSETID',
fromint.id = 'INT_ID_FRO',
toint.id = 'INT_ID_TO',
sect.id = 'SECT_ID',
old.desig = 'OLD_STREET',
new.desig = 'Street_Des') %>%
mutate(sect.id = as.double(sect.id)) %>%
st_set_geometry(NULL)
# left join bss <- boe
streets <- bss %>%
inner_join(boe, by='sect.id') %>%
mutate(length.m = 3.28084*length.ft)
streets <- streets %>%
inner_join(int_elev, by=c("fromint.id" = "clnode.id")) %>%
rename(from.elev = "int_elev") %>%
inner_join(int_elev, by=c("toint.id" = "clnode.id")) %>%
rename(to.elev = "int_elev") %>%
mutate(slope = (abs((from.elev - to.elev))/(length.m))*100) %>%
filter(slope < 10)
# Set Color Palette
pal <- colorNumeric(
palette = "YlGnBu",
domain = streets$slope
)
# Create the leaflet map
map <- leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite) %>%
addPolylines(
color = ~pal(slope),
weight = 1,
opacity = 1,
data = streets) %>%
addLegend(pal = pal,
values = streets$slope,
position = "bottomright",
title = "Slope",
labFormat = labelFormat(suffix = "%"))
map
# load libraries
library(sf)
library(dplyr)
library(leaflet)
# import street data
bss <- st_read("Data/Street_Pavement_Condition.shp",quiet=TRUE)
boe <- st_read("C:/Users/Tim/Documents/data/street-slope-la/Streets_Centerline/Streets_Centerline.shp", quiet=TRUE)
int <- st_read("Data/Intersections.shp", quiet=TRUE)
# trim bss centerline
bss <- bss %>%
dplyr::select(SECT_ID, PRIME, FROM_, TO_, SURF1, ZLENGTH, ZWIDTH, geometry) %>%
rename(sect.id = 'SECT_ID',
street = 'PRIME',
from = 'FROM_',
to = 'TO_',
surface = 'SURF1',
length.ft = 'ZLENGTH',
width.ft = 'ZWIDTH',
geom = 'geometry') %>%
mutate(sect.id = as.double(sect.id))
# trim boe centerline
boe <- boe %>%
dplyr::select(ASSETID, INT_ID_FRO, INT_ID_TO, SECT_ID, OLD_STREET, Street_Des) %>%
rename(asset.id = 'ASSETID',
fromint.id = 'INT_ID_FRO',
toint.id = 'INT_ID_TO',
sect.id = 'SECT_ID',
old.desig = 'OLD_STREET',
new.desig = 'Street_Des') %>%
mutate(sect.id = as.double(sect.id)) %>%
st_set_geometry(NULL)
# left join bss <- boe
streets <- bss %>%
inner_join(boe, by='sect.id') %>%
mutate(length.m = 3.28084*length.ft)
la_streets <- streets %>%
inner_join(int_elev, by=c("fromint.id" = "clnode.id")) %>%
rename(from.elev = "int_elev") %>%
inner_join(int_elev, by=c("toint.id" = "clnode.id")) %>%
rename(to.elev = "int_elev") %>%
mutate(slope = (abs((from.elev - to.elev))/(length.m))*100) %>%
filter(slope > 5)
# Set Color Palette
pal <- colorNumeric(
palette = "YlGnBu",
domain = streets$slope
)
# Create the leaflet map
map <- leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite) %>%
addPolylines(
color = ~pal(slope),
weight = 1,
opacity = 1,
data = streets) %>%
addLegend(pal = pal,
values = streets$slope,
position = "bottomright",
title = "Slope",
labFormat = labelFormat(suffix = "%"))
# Set Color Palette
pal <- colorNumeric(
palette = "YlGnBu",
domain = la_streets$slope
)
# Create the leaflet map
map <- leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite) %>%
addPolylines(
color = ~pal(slope),
weight = 1,
opacity = 1,
data = la_streets) %>%
addLegend(pal = pal,
values = la_streets$slope,
position = "bottomright",
title = "Slope",
labFormat = labelFormat(suffix = "%"))
map
